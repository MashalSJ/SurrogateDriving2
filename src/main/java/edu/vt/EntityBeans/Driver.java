
package edu.vt.EntityBeans;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/*
The @Entity annotation designates this class as a JPA Entity POJO class
representing the Driver table in the SurrogateDrivingDB database.
 */
@Entity

// Name of the database table represented
@Table(name = "Driver")
/*
CREATE TABLE Driver
(
driver_id INT PRIMARY KEY AUTO_INCREMENT,
ssn INT NOT NULL,
license_number VARCHAR(16) NOT NULL,
name VARCHAR(100) NOT NULL,
Date_Of_Birth DATE NOT NULL,
phone_number VARCHAR(32) NOT NULL
);
 */
@NamedQueries({
        @NamedQuery(name = "Driver.findAll", query = "SELECT u FROM Driver u")
        , @NamedQuery(name = "Driver.findByDriverId", query = "SELECT u FROM Driver u WHERE u.driver_id = :ssn")
        , @NamedQuery(name = "Driver.findBySSN", query = "SELECT u FROM Driver u WHERE u.ssn = :ssn")
        , @NamedQuery(name = "Driver.findByLicenseNumber", query = "SELECT u FROM Driver u WHERE u.license_number = :license_number")
        , @NamedQuery(name = "Driver.findByName", query = "SELECT u FROM Driver u WHERE u.name = :name")
        , @NamedQuery(name = "Driver.findByDateOfBirth", query = "SELECT u FROM Driver u WHERE u.Date_Of_Birth = :Date_Of_Birth")
        , @NamedQuery(name = "Driver.findPhoneNumber", query = "SELECT u FROM Driver u WHERE u.phone_number = :phone_number")
         })

public class Driver implements Serializable {
    /*
    ========================================================
    Instance variables representing the attributes (columns)
    of the Driver table in the SurrogateDrivingDB database.

    CREATE TABLE Driver
    (
    driver_id INT PRIMARY KEY AUTO_INCREMENT,
    ssn INT NOT NULL,
    license_number VARCHAR(16) NOT NULL,
    name VARCHAR(100) NOT NULL,
    Date_Of_Birth DATE NOT NULL,
    phone_number VARCHAR(32) NOT NULL
    );
    ========================================================
     */
    private static final long serialVersionUID = 1L;
    /*
    Primary Key id is auto generated by the system as an Integer value
    starting with 1 and incremented by 1, i.e., 1,2,3,...
    A deleted entity object's primary key number is not reused.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "driver_id")
    private Integer driver_id;

    // drivername VARCHAR(32) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Column(name = "ssn")
    private int ssn;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 16)
    @Column(name = "license_number")
    private String license_number;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "name")
    private String name;

    @Basic(optional = false)
    @NotNull
    @Column(name = "Date_Of_Birth")
    @Temporal(TemporalType.DATE)
    private Date Date_Of_Birth;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "phone_number")
    private String phone_number;



    /*
    ===============================================================
    Class constructors for instantiating a Driver entity object to
    represent a row in the Driver table in the SurrogateDrivingDB database.
    ===============================================================
     */

    // Used in createAccount method in DriverController
    public Driver() {
    }

    public Driver(Integer driver_id) {
        this.driver_id = driver_id;
    }

    public Driver(Integer driver_id, int ssn, String license_number, String name, Date date_Of_Birth, String phone_number) {
        this.driver_id = driver_id;
        this.ssn = ssn;
        this.license_number = license_number;
        this.name = name;
        Date_Of_Birth = date_Of_Birth;
        this.phone_number = phone_number;
    }

    /*
            ======================================================
            Getter and Setter methods for the attributes (columns)
            of the Driver table in the SurrogateDrivingDB database.
            ======================================================
             */

    public Integer getDriver_id() {
        return driver_id;
    }

    public void setDriver_id(Integer driver_id) {
        this.driver_id = driver_id;
    }

    public int getSsn() {
        return ssn;
    }

    public void setSsn(int ssn) {
        this.ssn = ssn;
    }

    public String getLicense_number() {
        return license_number;
    }

    public void setLicense_number(String license_number) {
        this.license_number = license_number;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Date getDate_Of_Birth() {
        return Date_Of_Birth;
    }

    public void setDate_Of_Birth(Date date_Of_Birth) {
        Date_Of_Birth = date_Of_Birth;
    }

    public String getPhone_number() {
        return phone_number;
    }

    public void setPhone_number(String phone_number) {
        this.phone_number = phone_number;
    }
    /*
    ================================
    Instance Methods Used Internally
    ================================
     */

    // Generate and return a hash code value for the object with database primary key id
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (driver_id != null ? driver_id.hashCode() : 0);
        return hash;
    }

    /*
     Checks if the Driver object identified by 'object' is the same as the Driver object identified by 'id'
     Parameter object = Driver object identified by 'object'
     Returns True if the Driver 'object' and 'id' are the same; otherwise, return False
     */
    @Override
    public boolean equals(Object object) {
        if (!(object instanceof Driver)) {
            return false;
        }
        Driver other = (Driver) object;
        return (this.driver_id != null || other.driver_id == null) && (this.driver_id == null || this.driver_id.equals(other.driver_id));
    }

    // Return String representation of database primary key id
    @Override
    public String toString() {
        return driver_id.toString();
    }

}
